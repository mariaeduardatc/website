{"ast":null,"code":"import { scan, iterator } from './tokenizer.js';\nconst commands = 'MmLlHhVvCcSsQqTtAaZz';\nconst relatives = 'mlhvcsqtaz';\nfunction parse(input) {\n  let iter = iterator(scan(input));\n  let temp = {};\n  let result = {\n    commands: [],\n    valid: true\n  };\n  while (iter.next()) {\n    let {\n      curr\n    } = iter.get();\n    if (curr.isSpace() || curr.isSymbol(',')) {\n      continue;\n    }\n    if (curr.isWord()) {\n      if (temp.name) {\n        result.commands.push(temp);\n        temp = {};\n      }\n      temp.name = curr.value;\n      temp.value = [];\n      if (!commands.includes(curr.value)) {\n        temp.type = 'unknown';\n        result.valid = false;\n      } else if (relatives.includes(curr.value)) {\n        temp.type = 'relative';\n      } else {\n        temp.type = 'absolute';\n      }\n    } else if (temp.value) {\n      let value = curr.value;\n      if (curr.isNumber()) {\n        value = Number(curr.value);\n      }\n      temp.value.push(value);\n    } else if (!temp.name) {\n      result.valid = false;\n    }\n  }\n  if (temp.name) {\n    result.commands.push(temp);\n  }\n  return result;\n}\nexport default parse;","map":{"version":3,"names":["scan","iterator","commands","relatives","parse","input","iter","temp","result","valid","next","curr","get","isSpace","isSymbol","isWord","name","push","value","includes","type","isNumber","Number"],"sources":["/Users/mariaeduardatc/Documents/GitHub/website/node_modules/css-doodle/src/parser/parse-svg-path.js"],"sourcesContent":["import { scan, iterator } from './tokenizer.js';\n\nconst commands = 'MmLlHhVvCcSsQqTtAaZz';\nconst relatives = 'mlhvcsqtaz';\n\nfunction parse(input) {\n  let iter = iterator(scan(input));\n  let temp = {};\n  let result = {\n    commands: [],\n    valid: true\n  };\n  while (iter.next()) {\n    let { curr } = iter.get();\n    if (curr.isSpace() || curr.isSymbol(',')) {\n      continue;\n    }\n    if (curr.isWord()) {\n      if (temp.name) {\n        result.commands.push(temp);\n        temp = {};\n      }\n      temp.name = curr.value;\n      temp.value = [];\n      if (!commands.includes(curr.value)) {\n        temp.type = 'unknown';\n        result.valid = false;\n      } else if (relatives.includes(curr.value)) {\n        temp.type = 'relative';\n      } else {\n        temp.type = 'absolute';\n      }\n    } else if (temp.value) {\n      let value = curr.value;\n      if (curr.isNumber()) {\n        value = Number(curr.value);\n      }\n      temp.value.push(value);\n    } else if (!temp.name) {\n      result.valid = false;\n    }\n  }\n  if (temp.name) {\n    result.commands.push(temp);\n  }\n  return result;\n}\n\nexport default parse;\n"],"mappings":"AAAA,SAASA,IAAI,EAAEC,QAAQ,QAAQ,gBAAgB;AAE/C,MAAMC,QAAQ,GAAG,sBAAsB;AACvC,MAAMC,SAAS,GAAG,YAAY;AAE9B,SAASC,KAAK,CAACC,KAAK,EAAE;EACpB,IAAIC,IAAI,GAAGL,QAAQ,CAACD,IAAI,CAACK,KAAK,CAAC,CAAC;EAChC,IAAIE,IAAI,GAAG,CAAC,CAAC;EACb,IAAIC,MAAM,GAAG;IACXN,QAAQ,EAAE,EAAE;IACZO,KAAK,EAAE;EACT,CAAC;EACD,OAAOH,IAAI,CAACI,IAAI,EAAE,EAAE;IAClB,IAAI;MAAEC;IAAK,CAAC,GAAGL,IAAI,CAACM,GAAG,EAAE;IACzB,IAAID,IAAI,CAACE,OAAO,EAAE,IAAIF,IAAI,CAACG,QAAQ,CAAC,GAAG,CAAC,EAAE;MACxC;IACF;IACA,IAAIH,IAAI,CAACI,MAAM,EAAE,EAAE;MACjB,IAAIR,IAAI,CAACS,IAAI,EAAE;QACbR,MAAM,CAACN,QAAQ,CAACe,IAAI,CAACV,IAAI,CAAC;QAC1BA,IAAI,GAAG,CAAC,CAAC;MACX;MACAA,IAAI,CAACS,IAAI,GAAGL,IAAI,CAACO,KAAK;MACtBX,IAAI,CAACW,KAAK,GAAG,EAAE;MACf,IAAI,CAAChB,QAAQ,CAACiB,QAAQ,CAACR,IAAI,CAACO,KAAK,CAAC,EAAE;QAClCX,IAAI,CAACa,IAAI,GAAG,SAAS;QACrBZ,MAAM,CAACC,KAAK,GAAG,KAAK;MACtB,CAAC,MAAM,IAAIN,SAAS,CAACgB,QAAQ,CAACR,IAAI,CAACO,KAAK,CAAC,EAAE;QACzCX,IAAI,CAACa,IAAI,GAAG,UAAU;MACxB,CAAC,MAAM;QACLb,IAAI,CAACa,IAAI,GAAG,UAAU;MACxB;IACF,CAAC,MAAM,IAAIb,IAAI,CAACW,KAAK,EAAE;MACrB,IAAIA,KAAK,GAAGP,IAAI,CAACO,KAAK;MACtB,IAAIP,IAAI,CAACU,QAAQ,EAAE,EAAE;QACnBH,KAAK,GAAGI,MAAM,CAACX,IAAI,CAACO,KAAK,CAAC;MAC5B;MACAX,IAAI,CAACW,KAAK,CAACD,IAAI,CAACC,KAAK,CAAC;IACxB,CAAC,MAAM,IAAI,CAACX,IAAI,CAACS,IAAI,EAAE;MACrBR,MAAM,CAACC,KAAK,GAAG,KAAK;IACtB;EACF;EACA,IAAIF,IAAI,CAACS,IAAI,EAAE;IACbR,MAAM,CAACN,QAAQ,CAACe,IAAI,CAACV,IAAI,CAAC;EAC5B;EACA,OAAOC,MAAM;AACf;AAEA,eAAeJ,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}