{"ast":null,"code":"import { clamp, is_empty, make_tag_function, round } from '../utils/index.js';\nimport parse_shape_commands from '../parser/parse-shape-commands.js';\nimport parse_value_group from '../parser/parse-value-group.js';\nimport parse_direction from '../parser/parse-direction.js';\nimport parse_compound_value from '../parser/parse-compound-value.js';\nimport calc from '../calc.js';\nconst {\n  cos,\n  sin,\n  abs,\n  atan2,\n  PI\n} = Math;\nconst _ = make_tag_function(c => {\n  return create_shape_points(parse_shape_commands(c), {\n    min: 3,\n    max: 3600\n  });\n});\nconst shapes = {\n  circle: () => _`\n    split: 180;\n    scale: .99\n  `,\n  triangle: () => _`\n    rotate: 30;\n    scale: 1.1;\n    move: 0 .2\n  `,\n  pentagon: () => _`\n    split: 5;\n    rotate: 54\n  `,\n  hexagon: () => _`\n    split: 6;\n    rotate: 30;\n    scale: .98\n  `,\n  octagon: () => _`\n    split: 8;\n    rotat: 22.5;\n    scale: .99\n  `,\n  star: () => _`\n    split: 10;\n    r: cos(5t);\n    rotate: -18;\n    scale: .99\n  `,\n  infinity: () => _`\n    split: 180;\n    scale: .99;\n    x: cos(t)*.99 / (sin(t)^2 + 1);\n    y: x * sin(t)\n  `,\n  heart: () => _`\n    split: 180;\n    rotate: 180;\n    a: cos(t)*13/18 - cos(2t)*5/18;\n    b: cos(3t)/18 + cos(4t)/18;\n    x: (.75 * sin(t)^3) * 1.2;\n    y: (a - b + .2) * -1.1\n  `,\n  bean: () => _`\n    split: 180;\n    r: sin(t)^3 + cos(t)^3;\n    move: -.35 .35;\n  `,\n  bicorn: () => _`\n    split: 180;\n    x: cos(t);\n    y: sin(t)^2 / (2 + sin(t)) - .5\n  `,\n  drop: () => _`\n    split: 180;\n    rotate: 90;\n    scale: .95;\n    x: sin(t);\n    y: (1 + sin(t)) * cos(t) / 1.6\n  `,\n  fish: () => _`\n    split: 240;\n    x: cos(t) - sin(t)^2 / sqrt(2) - .04;\n    y: sin(2t)/2\n  `,\n  whale: () => _`\n    split: 240;\n    rotate: 180;\n    R: 3.4 * (sin(t)^2 - .5) * cos(t);\n    x: cos(t) * R + .75;\n    y: sin(t) * R * 1.2\n  `,\n  windmill: () => _`\n    split: 18;\n    R: seq(.618, 1, 0);\n    T: seq(t-.55, t, t);\n    x: R * cos(T);\n    y: R * sin(T)\n  `,\n  vase: () => _`\n    split: 240;\n    scale: .3;\n    x: sin(4t) + sin(t) * 1.4;\n    y: cos(t) + cos(t) * 4.8 + .3\n  `,\n  clover: function () {\n    let k = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3;\n    k = clamp(k, 3, 5);\n    if (k == 4) k = 2;\n    return _`\n      split: 240;\n      r: cos(${k}t);\n      scale: .98\n    `;\n  },\n  hypocycloid: function () {\n    let k = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3;\n    k = clamp(k, 3, 5);\n    let scale = [0, 0, 0, .34, .25, .19][k];\n    return _`\n      split: 240;\n      scale: ${scale};\n      k: ${k};\n      x: (k-1)*cos(t) + cos((k-1)*t);\n      y: (k-1)*sin(t) - sin((k-1)*t)\n    `;\n  },\n  bud: function () {\n    let k = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3;\n    k = clamp(k, 3, 10);\n    return _`\n      split: 240;\n      scale: .8;\n      r: 1 + .2 * cos(${k}t)\n    `;\n  }\n};\nclass Point {\n  constructor(x, y, angle) {\n    this.x = x;\n    this.y = y;\n    this.extra = angle;\n  }\n  valueOf() {\n    return this.x + ' ' + this.y;\n  }\n  toString() {\n    return this.valueOf();\n  }\n}\nfunction create_polygon_points(option, fn) {\n  if (typeof arguments[0] == 'function') {\n    fn = option;\n    option = {};\n  }\n  if (!fn) {\n    fn = t => [cos(t), sin(t)];\n  }\n  let split = option.split || 180;\n  let turn = option.turn || 1;\n  let frame = option.frame;\n  let fill = option['fill'] || option['fill-rule'];\n  let direction = parse_direction(option['direction'] || option['dir'] || '');\n  let unit = option.unit;\n  let rad = PI * 2 * turn / split;\n  let points = [];\n  let first_point, first_point2;\n  let factor = option.scale === undefined ? 1 : option.scale;\n  let add = _ref => {\n    let [x1, y1, dx = 0, dy = 0] = _ref;\n    if (x1 == 'evenodd' || x1 == 'nonzero') {\n      return points.push(new Point(x1, '', ''));\n    }\n    let [x, y] = scale(x1, -y1, factor);\n    let [dx1, dy2] = scale(dx, -dy, factor);\n    let angle = calc_angle(x, y, dx1, dy2, direction);\n    if (unit !== undefined && unit !== '%') {\n      if (unit !== 'none') {\n        x = round(x) + unit;\n        y = round(y) + unit;\n      }\n    } else {\n      x = round((x + 1) * 50) + '%';\n      y = round((y + 1) * 50) + '%';\n    }\n    points.push(new Point(x, y, angle));\n  };\n  if (fill == 'nonzero' || fill == 'evenodd') {\n    add([fill, '', '']);\n  }\n  for (let i = 0; i < split; ++i) {\n    let t = rad * i;\n    let point = fn(t, i);\n    if (!i) first_point = point;\n    add(point);\n  }\n  if (frame !== undefined) {\n    add(first_point);\n    let w = frame / 100;\n    if (turn > 1) w *= 2;\n    if (w == 0) w = .002;\n    for (let i = 0; i < split; ++i) {\n      let t = -rad * i;\n      let [x, y, dx = 0, dy = 0] = fn(t, i);\n      let theta = atan2(y + dy, x - dx);\n      let point = [x - w * cos(theta), y - w * sin(theta)];\n      if (!i) first_point2 = point;\n      add(point);\n    }\n    add(first_point2);\n    add(first_point);\n  }\n  return points;\n}\nfunction calc_angle(x, y, dx, dy, option) {\n  let base = atan2(y + dy, x - dx) * 180 / PI;\n  if (option.direction === 'reverse') {\n    base -= 180;\n  }\n  if (!option.direction) {\n    base = 90;\n  }\n  if (option.angle) {\n    base += option.angle;\n  }\n  return base;\n}\nfunction rotate(x, y, deg) {\n  let rad = -PI / 180 * deg;\n  return [x * cos(rad) - y * sin(rad), y * cos(rad) + x * sin(rad)];\n}\nfunction translate(x, y, offset) {\n  let [dx, dy = dx] = parse_value_group(offset).map(Number);\n  return [x + (dx || 0), y - (dy || 0), dx, dy];\n}\nfunction scale(x, y, factor) {\n  let [fx, fy = fx] = parse_value_group(factor).map(Number);\n  return [x * fx, y * fy];\n}\nfunction create_shape_points(props, _ref2) {\n  let {\n    min,\n    max\n  } = _ref2;\n  let split = clamp(parseInt(props.vertices || props.points || props.split) || 0, min, max);\n  let px = is_empty(props.x) ? 'cos(t)' : props.x;\n  let py = is_empty(props.y) ? 'sin(t)' : props.y;\n  let pr = is_empty(props.r) ? '' : props.r;\n  let pt = is_empty(props.t) ? '' : props.t;\n  let {\n    unit,\n    value\n  } = parse_compound_value(pr);\n  if (unit && !props[unit] && unit !== 't') {\n    if (is_empty(props.unit)) {\n      props.unit = unit;\n    }\n    pr = props.r = value;\n  }\n  if (props.degree) {\n    props.rotate = props.degree;\n  }\n  if (props.origin) {\n    props.move = props.origin;\n  }\n  let option = Object.assign({}, props, {\n    split\n  });\n  return create_polygon_points(option, (t, i) => {\n    let context = Object.assign({}, props, {\n      't': pt || t,\n      'Î¸': pt || t,\n      'i': i + 1,\n      seq() {\n        var _ref3;\n        if (!arguments.length) return '';\n        return _ref3 = i % arguments.length, _ref3 < 0 || arguments.length <= _ref3 ? undefined : arguments[_ref3];\n      },\n      range(a) {\n        let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        a = Number(a) || 0;\n        b = Number(b) || 0;\n        if (a > b) [a, b] = [b, a];\n        let step = abs(b - a) / (split - 1);\n        return a + step * i;\n      }\n    });\n    let x = calc(px, context);\n    let y = calc(py, context);\n    let dx = 0;\n    let dy = 0;\n    if (pr) {\n      let r = calc(pr, context);\n      if (r == 0) {\n        r = .00001;\n      }\n      if (pt) {\n        t = calc(pt, context);\n      }\n      x = r * cos(t);\n      y = r * sin(t);\n    }\n    if (props.rotate) {\n      [x, y] = rotate(x, y, Number(props.rotate) || 0);\n    }\n    if (props.move) {\n      [x, y, dx, dy] = translate(x, y, props.move);\n    }\n    return [round(x), round(y), round(dx), round(dy)];\n  });\n}\nexport { create_polygon_points, create_shape_points, shapes };","map":{"version":3,"names":["clamp","is_empty","make_tag_function","round","parse_shape_commands","parse_value_group","parse_direction","parse_compound_value","calc","cos","sin","abs","atan2","PI","Math","_","c","create_shape_points","min","max","shapes","circle","triangle","pentagon","hexagon","octagon","star","infinity","heart","bean","bicorn","drop","fish","whale","windmill","vase","clover","k","hypocycloid","scale","bud","Point","constructor","x","y","angle","extra","valueOf","toString","create_polygon_points","option","fn","arguments","t","split","turn","frame","fill","direction","unit","rad","points","first_point","first_point2","factor","undefined","add","x1","y1","dx","dy","push","dx1","dy2","calc_angle","i","point","w","theta","base","rotate","deg","translate","offset","map","Number","fx","fy","props","parseInt","vertices","px","py","pr","r","pt","value","degree","origin","move","Object","assign","context","seq","length","range","a","b","step"],"sources":["/Users/mariaeduardatc/Documents/GitHub/website/node_modules/css-doodle/src/generator/shapes.js"],"sourcesContent":["import { clamp, is_empty, make_tag_function, round } from '../utils/index.js';\nimport parse_shape_commands from '../parser/parse-shape-commands.js';\nimport parse_value_group from '../parser/parse-value-group.js';\nimport parse_direction from '../parser/parse-direction.js';\nimport parse_compound_value from '../parser/parse-compound-value.js';\nimport calc from '../calc.js';\n\nconst { cos, sin, abs, atan2, PI } = Math;\n\nconst _ = make_tag_function(c => {\n  return create_shape_points(\n    parse_shape_commands(c), {min: 3, max: 3600}\n  );\n});\n\nconst shapes = {\n  circle: () => _`\n    split: 180;\n    scale: .99\n  `,\n\n  triangle: () => _`\n    rotate: 30;\n    scale: 1.1;\n    move: 0 .2\n  `,\n\n  pentagon: () => _`\n    split: 5;\n    rotate: 54\n  `,\n\n  hexagon: () => _`\n    split: 6;\n    rotate: 30;\n    scale: .98\n  `,\n\n  octagon: () => _`\n    split: 8;\n    rotat: 22.5;\n    scale: .99\n  `,\n\n  star: () => _`\n    split: 10;\n    r: cos(5t);\n    rotate: -18;\n    scale: .99\n  `,\n\n  infinity: () => _`\n    split: 180;\n    scale: .99;\n    x: cos(t)*.99 / (sin(t)^2 + 1);\n    y: x * sin(t)\n  `,\n\n  heart: () => _`\n    split: 180;\n    rotate: 180;\n    a: cos(t)*13/18 - cos(2t)*5/18;\n    b: cos(3t)/18 + cos(4t)/18;\n    x: (.75 * sin(t)^3) * 1.2;\n    y: (a - b + .2) * -1.1\n  `,\n\n  bean: () => _`\n    split: 180;\n    r: sin(t)^3 + cos(t)^3;\n    move: -.35 .35;\n  `,\n\n  bicorn: () => _`\n    split: 180;\n    x: cos(t);\n    y: sin(t)^2 / (2 + sin(t)) - .5\n  `,\n\n  drop: () => _`\n    split: 180;\n    rotate: 90;\n    scale: .95;\n    x: sin(t);\n    y: (1 + sin(t)) * cos(t) / 1.6\n  `,\n\n  fish: () => _`\n    split: 240;\n    x: cos(t) - sin(t)^2 / sqrt(2) - .04;\n    y: sin(2t)/2\n  `,\n\n  whale: () => _`\n    split: 240;\n    rotate: 180;\n    R: 3.4 * (sin(t)^2 - .5) * cos(t);\n    x: cos(t) * R + .75;\n    y: sin(t) * R * 1.2\n  `,\n\n  windmill:  () => _`\n    split: 18;\n    R: seq(.618, 1, 0);\n    T: seq(t-.55, t, t);\n    x: R * cos(T);\n    y: R * sin(T)\n  `,\n\n  vase: () => _`\n    split: 240;\n    scale: .3;\n    x: sin(4t) + sin(t) * 1.4;\n    y: cos(t) + cos(t) * 4.8 + .3\n  `,\n\n  clover: (k = 3) => {\n    k = clamp(k, 3, 5);\n    if (k == 4) k = 2;\n    return _`\n      split: 240;\n      r: cos(${k}t);\n      scale: .98\n    `;\n  },\n\n  hypocycloid: (k = 3) => {\n    k = clamp(k, 3, 5);\n    let scale = [0, 0, 0, .34, .25, .19][k];\n    return _`\n      split: 240;\n      scale: ${scale};\n      k: ${k};\n      x: (k-1)*cos(t) + cos((k-1)*t);\n      y: (k-1)*sin(t) - sin((k-1)*t)\n    `;\n  },\n\n  bud: (k = 3) => {\n    k = clamp(k, 3, 10);\n    return _`\n      split: 240;\n      scale: .8;\n      r: 1 + .2 * cos(${k}t)\n    `;\n  },\n};\n\nclass Point {\n  constructor(x, y, angle) {\n    this.x = x;\n    this.y = y;\n    this.extra = angle;\n  }\n  valueOf() {\n    return this.x + ' ' + this.y;\n  }\n  toString() {\n    return this.valueOf();\n  }\n}\n\nfunction create_polygon_points(option, fn) {\n  if (typeof arguments[0] == 'function') {\n    fn = option;\n    option = {};\n  }\n\n  if (!fn) {\n    fn = t => [ cos(t), sin(t) ];\n  }\n\n  let split = option.split || 180;\n  let turn = option.turn || 1;\n  let frame = option.frame;\n  let fill = option['fill'] || option['fill-rule'];\n  let direction = parse_direction(option['direction'] || option['dir'] || '');\n  let unit = option.unit;\n\n  let rad = (PI * 2) * turn / split;\n  let points = [];\n  let first_point, first_point2;\n\n  let factor = (option.scale === undefined) ? 1 : option.scale;\n  let add = ([x1, y1, dx = 0, dy = 0]) => {\n    if (x1 == 'evenodd' || x1 == 'nonzero') {\n      return points.push(new Point(x1, '', ''));\n    }\n    let [x, y] = scale(x1, -y1, factor);\n    let [dx1, dy2] = scale(dx, -dy, factor);\n    let angle = calc_angle(x, y, dx1, dy2, direction);\n    if (unit !== undefined && unit !== '%') {\n      if (unit !== 'none') {\n        x = round(x) + unit;\n        y = round(y) + unit;\n      }\n    } else {\n      x = round((x + 1) * 50) + '%';\n      y = round((y + 1) * 50) + '%';\n    }\n    points.push(new Point(x, y, angle));\n  }\n\n  if (fill == 'nonzero' || fill == 'evenodd') {\n    add([fill, '', '']);\n  }\n\n  for (let i = 0; i < split; ++i) {\n    let t = rad * i;\n    let point = fn(t, i);\n    if (!i) first_point = point;\n    add(point);\n  }\n\n  if (frame !== undefined) {\n    add(first_point);\n    let w = frame / 100;\n    if (turn > 1) w *= 2;\n    if (w == 0) w = .002;\n    for (let i = 0; i < split; ++i) {\n      let t = -rad * i;\n      let [x, y, dx = 0, dy = 0] = fn(t, i);\n      let theta = atan2(y + dy, x - dx);\n      let point = [\n        x - w * cos(theta),\n        y - w * sin(theta)\n      ];\n      if (!i) first_point2 = point;\n      add(point);\n    }\n    add(first_point2);\n    add(first_point);\n  }\n\n  return points;\n}\n\nfunction calc_angle(x, y, dx, dy, option) {\n  let base = atan2(y + dy, x - dx) * 180 / PI;\n  if (option.direction === 'reverse') {\n    base -= 180;\n  }\n  if (!option.direction) {\n    base = 90;\n  }\n  if (option.angle) {\n    base += option.angle;\n  }\n  return base;\n}\n\nfunction rotate(x, y, deg) {\n  let rad = -PI / 180 * deg;\n  return [\n    x * cos(rad) - y * sin(rad),\n    y * cos(rad) + x * sin(rad)\n  ];\n}\n\nfunction translate(x, y, offset) {\n  let [dx, dy = dx] = parse_value_group(offset).map(Number);\n  return [\n    x + (dx || 0),\n    y - (dy || 0),\n    dx,\n    dy\n  ];\n}\n\nfunction scale(x, y, factor) {\n  let [fx, fy = fx] = parse_value_group(factor).map(Number);\n  return [\n    x * fx,\n    y * fy\n  ];\n}\n\nfunction create_shape_points(props, {min, max}) {\n  let split = clamp(parseInt(props.vertices || props.points || props.split) || 0, min, max);\n  let px = is_empty(props.x) ? 'cos(t)' : props.x;\n  let py = is_empty(props.y) ? 'sin(t)' : props.y;\n  let pr = is_empty(props.r) ? ''       : props.r;\n  let pt = is_empty(props.t) ? ''       : props.t;\n\n  let { unit, value } = parse_compound_value(pr);\n  if (unit && !props[unit] && unit !== 't') {\n    if (is_empty(props.unit)) {\n      props.unit = unit;\n    }\n    pr = props.r = value;\n  }\n\n  if (props.degree) {\n    props.rotate = props.degree;\n  }\n\n  if (props.origin) {\n    props.move = props.origin;\n  }\n\n  let option = Object.assign({}, props, { split });\n\n  return create_polygon_points(option, (t, i) => {\n    let context = Object.assign({}, props, {\n      't': pt || t,\n      'Î¸': pt || t,\n      'i': (i + 1),\n      seq(...list) {\n        if (!list.length) return '';\n        return list[i % list.length];\n      },\n      range(a, b = 0) {\n        a = Number(a) || 0;\n        b = Number(b) || 0;\n        if (a > b) [a, b] = [b, a];\n        let step = abs(b - a) / (split - 1);\n        return a + step * i;\n      }\n    });\n    let x = calc(px, context);\n    let y = calc(py, context);\n    let dx = 0;\n    let dy = 0;\n    if (pr) {\n      let r = calc(pr, context);\n      if (r == 0) {\n        r = .00001;\n      }\n      if (pt) {\n        t = calc(pt, context);\n      }\n      x = r * cos(t);\n      y = r * sin(t);\n    }\n    if (props.rotate) {\n      [x, y] = rotate(x, y, Number(props.rotate) || 0);\n    }\n    if (props.move) {\n      [x, y, dx, dy] = translate(x, y, props.move);\n    }\n    return [round(x), round(y), round(dx), round(dy)];\n  });\n}\n\nexport {\n  create_polygon_points,\n  create_shape_points,\n  shapes,\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}