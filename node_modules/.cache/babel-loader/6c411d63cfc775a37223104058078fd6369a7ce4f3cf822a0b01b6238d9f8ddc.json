{"ast":null,"code":"import parse_compound_value from '../parser/parse-compound-value.js';\nfunction by_unit(fn) {\n  return function () {\n    let units = [],\n      values = [];\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    for (let arg of args) {\n      let {\n        unit,\n        value\n      } = parse_compound_value(arg);\n      if (unit !== undefined) {\n        units.push(unit);\n      }\n      if (value !== undefined) {\n        values.push(value);\n      }\n    }\n    let result = fn(...values);\n    let unit = units.find(n => n !== undefined);\n    if (unit === undefined) {\n      return result;\n    }\n    if (Array.isArray(result)) {\n      return result.map(n => n + unit);\n    }\n    return result + unit;\n  };\n}\nfunction by_charcode(fn) {\n  return function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    let codes = args.map(n => String(n).charCodeAt(0));\n    let result = fn(...codes);\n    return Array.isArray(result) ? result.map(n => String.fromCharCode(n)) : String.fromCharCode(result);\n  };\n}\nexport { by_unit, by_charcode };","map":{"version":3,"names":["parse_compound_value","by_unit","fn","units","values","args","arg","unit","value","undefined","push","result","find","n","Array","isArray","map","by_charcode","codes","String","charCodeAt","fromCharCode"],"sources":["/Users/mariaeduardatc/Documents/GitHub/website/node_modules/css-doodle/src/utils/transform.js"],"sourcesContent":["import parse_compound_value from '../parser/parse-compound-value.js';\n\nfunction by_unit(fn) {\n  return (...args) => {\n    let units = [], values = [];\n    for (let arg of args) {\n      let { unit, value } = parse_compound_value(arg);\n      if (unit !== undefined) {\n        units.push(unit);\n      }\n      if (value !== undefined) {\n        values.push(value);\n      }\n    }\n    let result = fn(...values);\n    let unit = units.find(n => n !== undefined);\n    if (unit === undefined) {\n      return result;\n    }\n    if (Array.isArray(result)) {\n      return result.map(n => n + unit);\n    }\n    return result + unit;\n  }\n}\n\nfunction by_charcode(fn) {\n  return (...args) => {\n    let codes = args.map(n => String(n).charCodeAt(0));\n    let result = fn(...codes);\n    return Array.isArray(result)\n      ? result.map(n => String.fromCharCode(n))\n      : String.fromCharCode(result);\n  }\n}\n\nexport {\n  by_unit,\n  by_charcode,\n}\n"],"mappings":"AAAA,OAAOA,oBAAoB,MAAM,mCAAmC;AAEpE,SAASC,OAAO,CAACC,EAAE,EAAE;EACnB,OAAO,YAAa;IAClB,IAAIC,KAAK,GAAG,EAAE;MAAEC,MAAM,GAAG,EAAE;IAAC,kCADnBC,IAAI;MAAJA,IAAI;IAAA;IAEb,KAAK,IAAIC,GAAG,IAAID,IAAI,EAAE;MACpB,IAAI;QAAEE,IAAI;QAAEC;MAAM,CAAC,GAAGR,oBAAoB,CAACM,GAAG,CAAC;MAC/C,IAAIC,IAAI,KAAKE,SAAS,EAAE;QACtBN,KAAK,CAACO,IAAI,CAACH,IAAI,CAAC;MAClB;MACA,IAAIC,KAAK,KAAKC,SAAS,EAAE;QACvBL,MAAM,CAACM,IAAI,CAACF,KAAK,CAAC;MACpB;IACF;IACA,IAAIG,MAAM,GAAGT,EAAE,CAAC,GAAGE,MAAM,CAAC;IAC1B,IAAIG,IAAI,GAAGJ,KAAK,CAACS,IAAI,CAACC,CAAC,IAAIA,CAAC,KAAKJ,SAAS,CAAC;IAC3C,IAAIF,IAAI,KAAKE,SAAS,EAAE;MACtB,OAAOE,MAAM;IACf;IACA,IAAIG,KAAK,CAACC,OAAO,CAACJ,MAAM,CAAC,EAAE;MACzB,OAAOA,MAAM,CAACK,GAAG,CAACH,CAAC,IAAIA,CAAC,GAAGN,IAAI,CAAC;IAClC;IACA,OAAOI,MAAM,GAAGJ,IAAI;EACtB,CAAC;AACH;AAEA,SAASU,WAAW,CAACf,EAAE,EAAE;EACvB,OAAO,YAAa;IAAA,mCAATG,IAAI;MAAJA,IAAI;IAAA;IACb,IAAIa,KAAK,GAAGb,IAAI,CAACW,GAAG,CAACH,CAAC,IAAIM,MAAM,CAACN,CAAC,CAAC,CAACO,UAAU,CAAC,CAAC,CAAC,CAAC;IAClD,IAAIT,MAAM,GAAGT,EAAE,CAAC,GAAGgB,KAAK,CAAC;IACzB,OAAOJ,KAAK,CAACC,OAAO,CAACJ,MAAM,CAAC,GACxBA,MAAM,CAACK,GAAG,CAACH,CAAC,IAAIM,MAAM,CAACE,YAAY,CAACR,CAAC,CAAC,CAAC,GACvCM,MAAM,CAACE,YAAY,CAACV,MAAM,CAAC;EACjC,CAAC;AACH;AAEA,SACEV,OAAO,EACPgB,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}