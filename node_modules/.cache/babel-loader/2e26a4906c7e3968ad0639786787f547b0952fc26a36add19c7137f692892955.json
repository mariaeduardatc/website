{"ast":null,"code":"/**\n * Improved noise by Ken Perlin\n * Translated from: https://mrl.nyu.edu/~perlin/noise/\n */\n\nimport { lerp } from './index.js';\nimport { duplicate } from './list.js';\nexport default class Perlin {\n  constructor() {\n    this.p = duplicate([151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180]);\n  }\n\n  // Convert LO 4 bits of hash code into 12 gradient directions.\n  grad(hash, x, y, z) {\n    let h = hash & 15,\n      u = h < 8 ? x : y,\n      v = h < 4 ? y : h == 12 || h == 14 ? x : z;\n    return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);\n  }\n  noise(x, y, z) {\n    let {\n      p,\n      grad\n    } = this;\n    // Find unit cube that contains point.\n    let [X, Y, Z] = [x, y, z].map(n => Math.floor(n) & 255);\n    // Find relative x, y, z of point in cube.\n    [x, y, z] = [x, y, z].map(n => n - Math.floor(n));\n    // Compute fade curves for each of x, y, z.\n    let [u, v, w] = [x, y, z].map(n => n * n * n * (n * (n * 6 - 15) + 10));\n    // hash coordinates of the 8 cube corners.\n    let A = p[X] + Y,\n      AA = p[A] + Z,\n      AB = p[A + 1] + Z,\n      B = p[X + 1] + Y,\n      BA = p[B] + Z,\n      BB = p[B + 1] + Z;\n    // And add blended results from 8 corners of cube.\n    return lerp(w, lerp(v, lerp(u, grad(p[AA], x, y, z), grad(p[BA], x - 1, y, z)), lerp(u, grad(p[AB], x, y - 1, z), grad(p[BB], x - 1, y - 1, z))), lerp(v, lerp(u, grad(p[AA + 1], x, y, z - 1), grad(p[BA + 1], x - 1, y, z - 1)), lerp(u, grad(p[AB + 1], x, y - 1, z - 1), grad(p[BB + 1], x - 1, y - 1, z - 1))));\n  }\n}","map":{"version":3,"names":["lerp","duplicate","Perlin","constructor","p","grad","hash","x","y","z","h","u","v","noise","X","Y","Z","map","n","Math","floor","w","A","AA","AB","B","BA","BB"],"sources":["/Users/mariaeduardatc/Documents/GitHub/website/node_modules/css-doodle/src/utils/noise.js"],"sourcesContent":["/**\n * Improved noise by Ken Perlin\n * Translated from: https://mrl.nyu.edu/~perlin/noise/\n */\n\nimport { lerp } from './index.js';\nimport { duplicate } from './list.js';\n\nexport default class Perlin {\n  constructor() {\n    this.p = duplicate([\n      151,160,137,91,90,15,\n      131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,\n      190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,\n      88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,\n      77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,\n      102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,\n      135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,\n      5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,\n      223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,\n      129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,\n      251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,\n      49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,\n      138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180\n    ]);\n  }\n\n  // Convert LO 4 bits of hash code into 12 gradient directions.\n  grad(hash, x, y, z) {\n    let h = hash & 15,\n        u = h < 8 ? x : y,\n        v = h < 4 ? y : h == 12 || h == 14 ? x : z;\n    return ((h&1) == 0 ? u : -u) + ((h&2) == 0 ? v : -v);\n  }\n\n  noise(x, y, z) {\n    let { p, grad } = this;\n    // Find unit cube that contains point.\n    let [X, Y, Z] = [x, y, z].map(n => Math.floor(n) & 255);\n    // Find relative x, y, z of point in cube.\n    [x, y, z] = [x, y, z].map(n => n - Math.floor(n));\n    // Compute fade curves for each of x, y, z.\n    let [u, v, w] = [x, y, z].map(n => n * n * n * (n * (n * 6 - 15) + 10));\n    // hash coordinates of the 8 cube corners.\n    let A = p[X  ]+Y, AA = p[A]+Z, AB = p[A+1]+Z,\n        B = p[X+1]+Y, BA = p[B]+Z, BB = p[B+1]+Z;\n    // And add blended results from 8 corners of cube.\n    return lerp(w, lerp(v, lerp(u, grad(p[AA  ], x  , y  , z   ),\n                                   grad(p[BA  ], x-1, y  , z   )),\n                           lerp(u, grad(p[AB  ], x  , y-1, z   ),\n                                   grad(p[BB  ], x-1, y-1, z   ))),\n                   lerp(v, lerp(u, grad(p[AA+1], x  , y  , z-1 ),\n                                   grad(p[BA+1], x-1, y  , z-1 )),\n                           lerp(u, grad(p[AB+1], x  , y-1, z-1 ),\n                                   grad(p[BB+1], x-1, y-1, z-1 ))));\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,SAASA,IAAI,QAAQ,YAAY;AACjC,SAASC,SAAS,QAAQ,WAAW;AAErC,eAAe,MAAMC,MAAM,CAAC;EAC1BC,WAAW,GAAG;IACZ,IAAI,CAACC,CAAC,GAAGH,SAAS,CAAC,CACjB,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EACpB,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAC3E,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAC1E,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAC1E,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAC3E,GAAG,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EACxE,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAC1E,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAC3E,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EACxE,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EACzE,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAC1E,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}