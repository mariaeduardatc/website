{"ast":null,"code":"import parse_value_group from './parser/parse-value-group.js';\nimport parse_grid from './parser/parse-grid.js';\nimport { shapes } from './generator/shapes.js';\nimport { is_preset, get_preset } from './preset-size.js';\nimport { prefixer } from './utils/prefixer.js';\nimport { memo } from './utils/memo.js';\nimport { add_alias } from './utils/index.js';\nconst map_left_right = {\n  center: '50%',\n  left: '0%',\n  right: '100%',\n  top: '50%',\n  bottom: '50%'\n};\nconst map_top_bottom = {\n  center: '50%',\n  top: '0%',\n  bottom: '100%',\n  left: '50%',\n  right: '50%'\n};\nexport default add_alias({\n  size(value, _ref) {\n    let {\n      is_special_selector,\n      grid\n    } = _ref;\n    let [w, h = w, ratio] = parse_value_group(value);\n    if (is_preset(w)) {\n      [w, h] = get_preset(w, h);\n    }\n    let styles = `\n      width: ${w};\n      height: ${h};\n    `;\n    if (w === 'auto' || h === 'auto') {\n      if (ratio) {\n        if (/^\\(.+\\)$/.test(ratio)) {\n          ratio = ratio.substring(1, ratio.length - 1);\n        } else if (!/^calc/.test(ratio)) {\n          ratio = `calc(${ratio})`;\n        }\n        if (!is_special_selector) {\n          styles += `aspect-ratio: ${ratio};`;\n        }\n      }\n      if (is_special_selector) {\n        styles += `aspect-ratio: ${ratio || grid.ratio};`;\n      }\n    }\n    if (!is_special_selector) {\n      styles += `\n        --internal-cell-width: ${w};\n        --internal-cell-height: ${h};\n      `;\n    }\n    return styles;\n  },\n  place(value, _ref2) {\n    let {\n      extra\n    } = _ref2;\n    let [left, top = '50%'] = parse_value_group(value);\n    left = map_left_right[left] || left;\n    top = map_top_bottom[top] || top;\n    const cw = 'var(--internal-cell-width, 25%)';\n    const ch = 'var(--internal-cell-height, 25%)';\n    return `\n      position: absolute;\n      left: ${left};\n      top: ${top};\n      width: ${cw};\n      height: ${ch};\n      margin-left: calc(${cw} / -2);\n      margin-top: calc(${ch} / -2);\n      grid-area: unset;\n      --plot-angle: ${extra || 0};\n      rotate: ${extra || 0}deg;\n    `;\n  },\n  grid(value, options) {\n    let result = {\n      clip: true\n    };\n    if (/no\\-*clip/i.test(value)) {\n      result.clip = false;\n      value = value.replace(/no\\-*clip/i, '');\n    }\n    let groups = parse_value_group(value, {\n      symbol: ['/', '+', '*', '|', '-', '~'],\n      noSpace: true,\n      verbose: true\n    });\n    for (let {\n      group,\n      value\n    } of groups) {\n      if (group === '+') result.scale = value;\n      if (group === '*') result.rotate = value;\n      if (group === '~') result.translate = value;\n      if (group === '/') {\n        if (result.size === undefined) result.size = this.size(value, options);else result.fill = value;\n      }\n      if ((group === '|' || group == '-' || group == '') && !result.grid) {\n        result.grid = parse_grid(value, options.max_grid);\n        if (group === '|') {\n          result.flexColumn = true;\n        }\n        if (group === '-') {\n          result.flexRow = true;\n        }\n      }\n    }\n    return result;\n  },\n  gap(value) {\n    return value;\n  },\n  seed(value) {\n    return value;\n  },\n  shape: memo('shape-property', value => {\n    let [type, ...args] = parse_value_group(value);\n    if (typeof shapes[type] !== 'function') return '';\n    let prop = 'clip-path';\n    let points = shapes[type](...args);\n    let rules = `${prop}: polygon(${points.join(',')});`;\n    return prefixer(prop, rules) + 'overflow: hidden;';\n  }),\n  use(rules) {\n    if (rules.length > 2) {\n      return rules;\n    }\n  },\n  content(value) {\n    return value;\n  }\n}, {\n  // legacy names.\n  'place-cell': 'place',\n  'offset': 'place',\n  'position': 'place'\n});","map":{"version":3,"names":["parse_value_group","parse_grid","shapes","is_preset","get_preset","prefixer","memo","add_alias","map_left_right","center","left","right","top","bottom","map_top_bottom","size","value","is_special_selector","grid","w","h","ratio","styles","test","substring","length","place","extra","cw","ch","options","result","clip","replace","groups","symbol","noSpace","verbose","group","scale","rotate","translate","undefined","fill","max_grid","flexColumn","flexRow","gap","seed","shape","type","args","prop","points","rules","join","use","content"],"sources":["/Users/mariaeduardatc/Documents/GitHub/website/node_modules/css-doodle/src/property.js"],"sourcesContent":["import parse_value_group from './parser/parse-value-group.js';\nimport parse_grid from './parser/parse-grid.js';\n\nimport { shapes } from './generator/shapes.js';\nimport { is_preset, get_preset } from './preset-size.js';\n\nimport { prefixer } from './utils/prefixer.js';\nimport { memo } from './utils/memo.js';\nimport { add_alias } from './utils/index.js';\n\nconst map_left_right = {\n  center: '50%',\n  left: '0%', right: '100%',\n  top: '50%', bottom: '50%'\n};\n\nconst map_top_bottom = {\n  center: '50%',\n  top: '0%', bottom: '100%',\n  left: '50%', right: '50%',\n};\n\nexport default add_alias({\n\n  size(value, { is_special_selector, grid }) {\n    let [w, h = w, ratio] = parse_value_group(value);\n    if (is_preset(w)) {\n      [w, h] = get_preset(w, h);\n    }\n    let styles = `\n      width: ${ w };\n      height: ${ h };\n    `;\n    if (w === 'auto' || h === 'auto') {\n      if (ratio) {\n        if (/^\\(.+\\)$/.test(ratio)) {\n          ratio = ratio.substring(1, ratio.length - 1);\n        } else if (!/^calc/.test(ratio)) {\n          ratio = `calc(${ratio})`;\n        }\n        if (!is_special_selector) {\n          styles += `aspect-ratio: ${ ratio };`;\n        }\n      }\n      if (is_special_selector) {\n        styles += `aspect-ratio: ${ ratio || grid.ratio };`;\n      }\n    }\n    if (!is_special_selector) {\n      styles += `\n        --internal-cell-width: ${ w };\n        --internal-cell-height: ${ h };\n      `;\n    }\n    return styles;\n  },\n\n  place(value, { extra }) {\n    let [left, top = '50%'] = parse_value_group(value);\n    left = map_left_right[left] || left;\n    top = map_top_bottom[top] || top;\n    const cw = 'var(--internal-cell-width, 25%)';\n    const ch = 'var(--internal-cell-height, 25%)';\n    return `\n      position: absolute;\n      left: ${ left };\n      top: ${ top };\n      width: ${ cw };\n      height: ${ ch };\n      margin-left: calc(${ cw } / -2);\n      margin-top: calc(${ ch } / -2);\n      grid-area: unset;\n      --plot-angle: ${ extra || 0 };\n      rotate: ${ extra || 0 }deg;\n    `;\n  },\n\n  grid(value, options) {\n    let result = {\n      clip: true,\n    };\n    if (/no\\-*clip/i.test(value)) {\n      result.clip = false;\n      value = value.replace(/no\\-*clip/i, '');\n    }\n    let groups = parse_value_group(value, {\n      symbol: ['/', '+', '*', '|', '-', '~'],\n      noSpace: true,\n      verbose: true\n    });\n    for (let { group, value } of groups) {\n      if (group === '+') result.scale = value;\n      if (group === '*') result.rotate = value;\n      if (group === '~') result.translate = value;\n      if (group === '/') {\n        if (result.size === undefined) result.size = this.size(value, options);\n        else result.fill = value;\n      }\n      if ((group === '|' || group == '-' || group == '') && !result.grid) {\n        result.grid = parse_grid(value, options.max_grid);\n        if (group === '|') {\n          result.flexColumn = true;\n        }\n        if (group === '-') {\n          result.flexRow = true;\n        }\n      }\n    }\n    return result;\n  },\n\n  gap(value) {\n    return value;\n  },\n\n  seed(value) {\n    return value;\n  },\n\n  shape: memo('shape-property', value => {\n    let [type, ...args] = parse_value_group(value);\n    if (typeof shapes[type] !== 'function') return '';\n    let prop = 'clip-path';\n    let points = shapes[type](...args);\n    let rules = `${ prop }: polygon(${points.join(',')});`;\n    return prefixer(prop, rules) + 'overflow: hidden;';\n  }),\n\n  use(rules) {\n    if (rules.length > 2) {\n      return rules;\n    }\n  },\n\n  content(value) {\n    return value;\n  },\n\n}, {\n  // legacy names.\n  'place-cell': 'place',\n  'offset': 'place',\n  'position': 'place',\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}