{"ast":null,"code":"import { iterator, scan } from './tokenizer.js';\nconst keywords = ['auto', 'reverse'];\nconst units = ['deg', 'rad', 'grad', 'turn'];\nfunction parse(input) {\n  let iter = iterator(scan(input));\n  let matched = false;\n  let unit = '';\n  let ret = {\n    direction: '',\n    angle: ''\n  };\n  while (iter.next()) {\n    let {\n      prev,\n      curr,\n      next\n    } = iter.get();\n    if (curr.isWord() && keywords.includes(curr.value)) {\n      ret.direction = curr.value;\n      matched = true;\n    } else if (curr.isNumber()) {\n      ret.angle = Number(curr.value);\n      matched = true;\n    } else if (curr.isWord() && prev && prev.isNumber() && units.includes(curr.value)) {\n      unit = curr.value;\n    } else if (curr.isSpace() && ret.direction !== '' && ret.angle !== '') {\n      break;\n    }\n  }\n  if (!matched) {\n    ret.direction = 'auto';\n  }\n  return normalizeAngle(ret, unit);\n}\nfunction normalizeAngle(input, unit) {\n  let {\n    angle\n  } = input;\n  if (angle === '') {\n    angle = 0;\n  }\n  if (unit === 'rad') {\n    angle /= Math.PI / 180;\n  }\n  if (unit === 'grad') {\n    angle *= .9;\n  }\n  if (unit === 'turn') {\n    angle *= 360;\n  }\n  return Object.assign({}, input, {\n    angle\n  });\n}\nexport default parse;","map":{"version":3,"names":["iterator","scan","keywords","units","parse","input","iter","matched","unit","ret","direction","angle","next","prev","curr","get","isWord","includes","value","isNumber","Number","isSpace","normalizeAngle","Math","PI","Object","assign"],"sources":["/Users/mariaeduardatc/Documents/GitHub/website/node_modules/css-doodle/src/parser/parse-direction.js"],"sourcesContent":["import { iterator, scan } from './tokenizer.js';\n\nconst keywords = ['auto', 'reverse'];\nconst units = ['deg', 'rad', 'grad', 'turn'];\n\nfunction parse(input) {\n  let iter = iterator(scan(input));\n  let matched = false;\n  let unit = '';\n  let ret = {\n    direction: '',\n    angle: '',\n  };\n  while (iter.next()) {\n    let { prev, curr, next } = iter.get();\n    if (curr.isWord() && keywords.includes(curr.value)) {\n      ret.direction = curr.value;\n      matched = true;\n    }\n    else if (curr.isNumber()) {\n      ret.angle = Number(curr.value);\n      matched = true;\n    }\n    else if (curr.isWord() && prev && prev.isNumber() && units.includes(curr.value)) {\n      unit = curr.value;\n    }\n    else if (curr.isSpace() && ret.direction !== '' && ret.angle !== '') {\n      break;\n    }\n  }\n  if (!matched) {\n    ret.direction = 'auto';\n  }\n  return normalizeAngle(ret, unit);\n}\n\nfunction normalizeAngle(input, unit) {\n  let { angle } = input;\n  if (angle === '') {\n    angle = 0;\n  }\n  if (unit === 'rad') {\n    angle /= (Math.PI / 180);\n  }\n  if (unit === 'grad') {\n    angle *= .9;\n  }\n  if (unit === 'turn') {\n    angle *= 360;\n  }\n  return Object.assign({}, input, { angle });\n}\n\nexport default parse;\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,IAAI,QAAQ,gBAAgB;AAE/C,MAAMC,QAAQ,GAAG,CAAC,MAAM,EAAE,SAAS,CAAC;AACpC,MAAMC,KAAK,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,CAAC;AAE5C,SAASC,KAAK,CAACC,KAAK,EAAE;EACpB,IAAIC,IAAI,GAAGN,QAAQ,CAACC,IAAI,CAACI,KAAK,CAAC,CAAC;EAChC,IAAIE,OAAO,GAAG,KAAK;EACnB,IAAIC,IAAI,GAAG,EAAE;EACb,IAAIC,GAAG,GAAG;IACRC,SAAS,EAAE,EAAE;IACbC,KAAK,EAAE;EACT,CAAC;EACD,OAAOL,IAAI,CAACM,IAAI,EAAE,EAAE;IAClB,IAAI;MAAEC,IAAI;MAAEC,IAAI;MAAEF;IAAK,CAAC,GAAGN,IAAI,CAACS,GAAG,EAAE;IACrC,IAAID,IAAI,CAACE,MAAM,EAAE,IAAId,QAAQ,CAACe,QAAQ,CAACH,IAAI,CAACI,KAAK,CAAC,EAAE;MAClDT,GAAG,CAACC,SAAS,GAAGI,IAAI,CAACI,KAAK;MAC1BX,OAAO,GAAG,IAAI;IAChB,CAAC,MACI,IAAIO,IAAI,CAACK,QAAQ,EAAE,EAAE;MACxBV,GAAG,CAACE,KAAK,GAAGS,MAAM,CAACN,IAAI,CAACI,KAAK,CAAC;MAC9BX,OAAO,GAAG,IAAI;IAChB,CAAC,MACI,IAAIO,IAAI,CAACE,MAAM,EAAE,IAAIH,IAAI,IAAIA,IAAI,CAACM,QAAQ,EAAE,IAAIhB,KAAK,CAACc,QAAQ,CAACH,IAAI,CAACI,KAAK,CAAC,EAAE;MAC/EV,IAAI,GAAGM,IAAI,CAACI,KAAK;IACnB,CAAC,MACI,IAAIJ,IAAI,CAACO,OAAO,EAAE,IAAIZ,GAAG,CAACC,SAAS,KAAK,EAAE,IAAID,GAAG,CAACE,KAAK,KAAK,EAAE,EAAE;MACnE;IACF;EACF;EACA,IAAI,CAACJ,OAAO,EAAE;IACZE,GAAG,CAACC,SAAS,GAAG,MAAM;EACxB;EACA,OAAOY,cAAc,CAACb,GAAG,EAAED,IAAI,CAAC;AAClC;AAEA,SAASc,cAAc,CAACjB,KAAK,EAAEG,IAAI,EAAE;EACnC,IAAI;IAAEG;EAAM,CAAC,GAAGN,KAAK;EACrB,IAAIM,KAAK,KAAK,EAAE,EAAE;IAChBA,KAAK,GAAG,CAAC;EACX;EACA,IAAIH,IAAI,KAAK,KAAK,EAAE;IAClBG,KAAK,IAAKY,IAAI,CAACC,EAAE,GAAG,GAAI;EAC1B;EACA,IAAIhB,IAAI,KAAK,MAAM,EAAE;IACnBG,KAAK,IAAI,EAAE;EACb;EACA,IAAIH,IAAI,KAAK,MAAM,EAAE;IACnBG,KAAK,IAAI,GAAG;EACd;EACA,OAAOc,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAErB,KAAK,EAAE;IAAEM;EAAM,CAAC,CAAC;AAC5C;AAEA,eAAeP,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}