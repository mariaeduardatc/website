{"ast":null,"code":"import Cache from '../utils/cache.js';\nimport { hash } from '../utils/index.js';\nfunction create_shader(gl, type, source) {\n  let shader = gl.createShader(type);\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n  return shader;\n}\n;\nfunction create_program(gl, vss, fss) {\n  let vs = create_shader(gl, gl.VERTEX_SHADER, vss);\n  let fs = create_shader(gl, gl.FRAGMENT_SHADER, fss);\n  let prog = gl.createProgram();\n  gl.attachShader(prog, vs);\n  gl.attachShader(prog, fs);\n  gl.linkProgram(prog);\n  if (!gl.getProgramParameter(prog, gl.LINK_STATUS)) {\n    console.warn('Link failed: ' + gl.getProgramInfoLog(prog));\n    console.warn('vs info-log: ' + gl.getShaderInfoLog(vs));\n    console.warn('fs info-log: ' + gl.getShaderInfoLog(fs));\n  }\n  return prog;\n}\nfunction add_uniform(fragment, uniform) {\n  if (!fragment.includes(uniform)) {\n    return uniform + '\\n' + fragment;\n  }\n  return fragment;\n}\nconst fragment_head = `#version 300 es\n  precision highp float;\n  out vec4 FragColor;\n`;\nconst default_vertex_shader = `#version 300 es\n  in vec4 position;\n  void main() {\n    gl_Position = position;\n  }\n`;\n\n// https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial/Using_textures_in_WebGL\nfunction load_texture(gl, image, i) {\n  const texture = gl.createTexture();\n  gl.activeTexture(gl['TEXTURE' + i]);\n  gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n\n  // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n}\nfunction draw_shader(shaders, width, height, seed) {\n  let result = Cache.get(shaders);\n  if (result) {\n    return Promise.resolve(result);\n  }\n  let canvas = document.createElement('canvas');\n  let ratio = window.devicePixelRatio || 1;\n  width *= ratio;\n  height *= ratio;\n  canvas.width = width;\n  canvas.height = height;\n  let gl = canvas.getContext('webgl2', {\n    preserveDrawingBuffer: true\n  });\n  if (!gl) return Promise.resolve('');\n\n  // resolution uniform\n  let fragment = add_uniform(shaders.fragment || '', 'uniform vec2 u_resolution;');\n  fragment = add_uniform(fragment, 'uniform float u_time;');\n  fragment = add_uniform(fragment, 'uniform float u_timeDelta;');\n  fragment = add_uniform(fragment, 'uniform int u_frameIndex;');\n  fragment = add_uniform(fragment, 'uniform vec2 u_seed;');\n  // fragment = add_uniform(fragment, 'uniform vec4 u_mouse;');\n\n  // texture uniform\n  shaders.textures.forEach(n => {\n    let uniform = `uniform sampler2D ${n.name};`;\n    fragment = add_uniform(fragment, uniform);\n  });\n  const isShaderToyFragment = /(^|[^\\w\\_])void\\s+mainImage\\(\\s*out\\s+vec4\\s+fragColor,\\s*in\\s+vec2\\s+fragCoord\\s*\\)/mg.test(fragment);\n  if (isShaderToyFragment) {\n    fragment = `// https://www.shadertoy.com/howto\n\n#define iResolution vec3(u_resolution, 0)\n#define iTime u_time\n#define iTimeDelta u_timeDelta\n#define iFrame u_frameIndex\n\n${shaders.textures.map((n, i) => `#define iChannel${i} ${n.name}`).join('\\n')}\n\n${fragment}\n\nvoid main() {\n  mainImage(FragColor, gl_FragCoord.xy);\n}`;\n  }\n  let program = create_program(gl, shaders.vertex || default_vertex_shader, fragment_head + fragment);\n\n  // position in vertex shader\n  let positionAttributeLocation = gl.getAttribLocation(program, 'position');\n  let positionBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n  let vertices = [-1, -1, -1, 1, 1, -1, 1, 1, -1, 1, 1, -1];\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);\n  gl.enableVertexAttribArray(positionAttributeLocation);\n  gl.vertexAttribPointer(positionAttributeLocation, 2, gl.FLOAT, false, 0, 0);\n  gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n  gl.clearColor(0, 0, 0, 0);\n  gl.clear(gl.COLOR_BUFFER_BIT);\n  gl.useProgram(program);\n\n  // resolve uniforms\n  const uResolutionLoc = gl.getUniformLocation(program, \"u_resolution\");\n  gl.uniform2fv(uResolutionLoc, [width, height]);\n  shaders.textures.forEach((n, i) => {\n    load_texture(gl, n.value, i);\n    gl.uniform1i(gl.getUniformLocation(program, n.name), i);\n  });\n\n  // vec2 u_seed, u_seed.x = hash(doodle.seed) / 1e16, u_seed.y = Math.random()\n  const uSeed = gl.getUniformLocation(program, \"u_seed\");\n  if (uSeed) {\n    gl.uniform2f(uSeed, hash(seed) / 1e16, Math.random());\n  }\n\n  // resolve image data in 72dpi :(\n  const uTimeLoc = gl.getUniformLocation(program, \"u_time\");\n  const uFrameLoc = gl.getUniformLocation(program, \"u_frameIndex\");\n  const uTimeDelta = gl.getUniformLocation(program, \"u_timeDelta\");\n  if (uTimeLoc || uTimeDelta || uFrameLoc) {\n    let frameIndex = 0;\n    let currentTime = 0;\n    return Promise.resolve(Cache.set(shaders, t => {\n      gl.clear(gl.COLOR_BUFFER_BIT);\n      if (uTimeLoc) gl.uniform1f(uTimeLoc, t / 1000);\n      if (uFrameLoc) gl.uniform1i(uFrameLoc, frameIndex++);\n      if (uTimeDelta) {\n        gl.uniform1f(uTimeDelta, (currentTime - t) / 1000);\n        currentTime = t;\n      }\n      gl.drawArrays(gl.TRIANGLES, 0, 6);\n      return canvas.toDataURL();\n    }));\n  } else {\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n    return Promise.resolve(Cache.set(shaders, canvas.toDataURL()));\n  }\n}\nexport { draw_shader };","map":{"version":3,"names":["Cache","hash","create_shader","gl","type","source","shader","createShader","shaderSource","compileShader","create_program","vss","fss","vs","VERTEX_SHADER","fs","FRAGMENT_SHADER","prog","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","console","warn","getProgramInfoLog","getShaderInfoLog","add_uniform","fragment","uniform","includes","fragment_head","default_vertex_shader","load_texture","image","i","texture","createTexture","activeTexture","pixelStorei","UNPACK_FLIP_Y_WEBGL","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","texParameteri","TEXTURE_WRAP_S","REPEAT","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","LINEAR","TEXTURE_MAG_FILTER","draw_shader","shaders","width","height","seed","result","get","Promise","resolve","canvas","document","createElement","ratio","window","devicePixelRatio","getContext","preserveDrawingBuffer","textures","forEach","n","name","isShaderToyFragment","test","map","join","program","vertex","positionAttributeLocation","getAttribLocation","positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","vertices","bufferData","Float32Array","STATIC_DRAW","enableVertexAttribArray","vertexAttribPointer","FLOAT","viewport","drawingBufferWidth","drawingBufferHeight","clearColor","clear","COLOR_BUFFER_BIT","useProgram","uResolutionLoc","getUniformLocation","uniform2fv","value","uniform1i","uSeed","uniform2f","Math","random","uTimeLoc","uFrameLoc","uTimeDelta","frameIndex","currentTime","set","t","uniform1f","drawArrays","TRIANGLES","toDataURL"],"sources":["/Users/mariaeduardatc/Documents/GitHub/website/node_modules/css-doodle/src/generator/shader.js"],"sourcesContent":["import Cache from '../utils/cache.js';\nimport { hash } from '../utils/index.js';\n\nfunction create_shader(gl, type, source) {\n  let shader = gl.createShader(type);\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n  return shader;\n};\n\nfunction create_program(gl, vss, fss) {\n  let vs = create_shader(gl, gl.VERTEX_SHADER, vss);\n  let fs = create_shader(gl, gl.FRAGMENT_SHADER, fss);\n  let prog = gl.createProgram();\n  gl.attachShader(prog, vs);\n  gl.attachShader(prog, fs);\n  gl.linkProgram(prog);\n  if (!gl.getProgramParameter(prog, gl.LINK_STATUS)) {\n    console.warn('Link failed: ' + gl.getProgramInfoLog(prog));\n    console.warn('vs info-log: ' + gl.getShaderInfoLog(vs));\n    console.warn('fs info-log: ' + gl.getShaderInfoLog(fs));\n  }\n  return prog;\n}\n\nfunction add_uniform(fragment, uniform) {\n  if (!fragment.includes(uniform)) {\n    return uniform + '\\n' + fragment;\n  }\n  return fragment;\n}\n\nconst fragment_head = `#version 300 es\n  precision highp float;\n  out vec4 FragColor;\n`;\n\nconst default_vertex_shader = `#version 300 es\n  in vec4 position;\n  void main() {\n    gl_Position = position;\n  }\n`;\n\n// https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial/Using_textures_in_WebGL\nfunction load_texture(gl, image, i) {\n  const texture = gl.createTexture();\n  gl.activeTexture(gl['TEXTURE' + i]);\n  gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA,gl.UNSIGNED_BYTE, image);\n\n  // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n}\n\nfunction draw_shader(shaders, width, height, seed) {\n  let result = Cache.get(shaders);\n  if (result) {\n    return Promise.resolve(result);\n  }\n  let canvas = document.createElement('canvas');\n  let ratio = window.devicePixelRatio || 1;\n  width *= ratio;\n  height *= ratio;\n  canvas.width = width;\n  canvas.height = height;\n\n  let gl = canvas.getContext('webgl2', {preserveDrawingBuffer: true});\n  if (!gl) return Promise.resolve('');\n\n  // resolution uniform\n  let fragment = add_uniform(shaders.fragment || '', 'uniform vec2 u_resolution;');\n\n  fragment = add_uniform(fragment, 'uniform float u_time;');\n  fragment = add_uniform(fragment, 'uniform float u_timeDelta;');\n  fragment = add_uniform(fragment, 'uniform int u_frameIndex;');\n  fragment = add_uniform(fragment, 'uniform vec2 u_seed;');\n  // fragment = add_uniform(fragment, 'uniform vec4 u_mouse;');\n\n  // texture uniform\n  shaders.textures.forEach(n => {\n    let uniform = `uniform sampler2D ${ n.name };`;\n    fragment =  add_uniform(fragment, uniform);\n  });\n\n  const isShaderToyFragment = /(^|[^\\w\\_])void\\s+mainImage\\(\\s*out\\s+vec4\\s+fragColor,\\s*in\\s+vec2\\s+fragCoord\\s*\\)/mg.test(fragment);\n  \n  if(isShaderToyFragment) {\n    fragment = `// https://www.shadertoy.com/howto\n\n#define iResolution vec3(u_resolution, 0)\n#define iTime u_time\n#define iTimeDelta u_timeDelta\n#define iFrame u_frameIndex\n\n${shaders.textures.map((n, i) => `#define iChannel${i} ${n.name}`).join('\\n')}\n\n${fragment}\n\nvoid main() {\n  mainImage(FragColor, gl_FragCoord.xy);\n}`\n  }\n\n  let program = create_program(\n    gl,\n    shaders.vertex || default_vertex_shader,\n    fragment_head + fragment\n  );\n\n  // position in vertex shader\n  let positionAttributeLocation = gl.getAttribLocation(program, 'position');\n  let positionBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n  let vertices = [-1, -1, -1, 1, 1, -1, 1, 1, -1, 1, 1, -1];\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);\n  gl.enableVertexAttribArray(positionAttributeLocation);\n  gl.vertexAttribPointer(positionAttributeLocation, 2, gl.FLOAT, false, 0, 0);\n\n  gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n  gl.clearColor(0, 0, 0, 0);\n  gl.clear(gl.COLOR_BUFFER_BIT);\n\n  gl.useProgram(program);\n\n  // resolve uniforms\n  const uResolutionLoc = gl.getUniformLocation(program, \"u_resolution\");\n  gl.uniform2fv(uResolutionLoc, [width, height]);\n\n  shaders.textures.forEach((n, i) => {\n    load_texture(gl, n.value, i);\n    gl.uniform1i(gl.getUniformLocation(program, n.name), i);\n  });\n\n  // vec2 u_seed, u_seed.x = hash(doodle.seed) / 1e16, u_seed.y = Math.random()\n  const uSeed = gl.getUniformLocation(program, \"u_seed\");\n  if(uSeed) {\n    gl.uniform2f(uSeed, hash(seed) / 1e16, Math.random());\n  }\n\n  // resolve image data in 72dpi :(\n  const uTimeLoc = gl.getUniformLocation(program, \"u_time\");\n  const uFrameLoc = gl.getUniformLocation(program, \"u_frameIndex\");\n  const uTimeDelta = gl.getUniformLocation(program, \"u_timeDelta\");\n  if(uTimeLoc || uTimeDelta || uFrameLoc) {\n    let frameIndex = 0;\n    let currentTime = 0;\n    return Promise.resolve(Cache.set(shaders, (t) => {\n      gl.clear(gl.COLOR_BUFFER_BIT);\n      if(uTimeLoc) gl.uniform1f(uTimeLoc, t / 1000);\n      if(uFrameLoc) gl.uniform1i(uFrameLoc, frameIndex++);\n      if(uTimeDelta) {\n        gl.uniform1f(uTimeDelta, (currentTime - t) / 1000);\n        currentTime = t;\n      }\n      gl.drawArrays(gl.TRIANGLES, 0, 6);\n      return canvas.toDataURL();\n    }));\n  } else {\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n    return Promise.resolve(Cache.set(shaders, canvas.toDataURL()));\n  }\n}\n\nexport {\n  draw_shader,\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}