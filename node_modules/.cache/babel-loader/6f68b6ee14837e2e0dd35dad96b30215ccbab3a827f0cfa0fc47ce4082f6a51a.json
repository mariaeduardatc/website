{"ast":null,"code":"import { cache_image, is_safari } from '../utils/index.js';\nfunction svg_to_png(svg, width, height, scale) {\n  return new Promise((resolve, reject) => {\n    let source = `data:image/svg+xml;utf8,${encodeURIComponent(svg)}`;\n    function action() {\n      let img = new Image();\n      img.crossOrigin = 'anonymous';\n      img.src = source;\n      img.onload = () => {\n        let canvas = document.createElement('canvas');\n        let ctx = canvas.getContext('2d');\n        let dpr = window.devicePixelRatio || 1;\n        /* scale with devicePixelRatio only when the scale equals 1 */\n        if (scale != 1) {\n          dpr = 1;\n        }\n        canvas.width = width * dpr;\n        canvas.height = height * dpr;\n        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n        try {\n          canvas.toBlob(blob => {\n            resolve({\n              blob,\n              source,\n              url: URL.createObjectURL(blob)\n            });\n          });\n        } catch (e) {\n          reject(e);\n        }\n      };\n    }\n    if (is_safari()) {\n      cache_image(source, action, 200);\n    } else {\n      action();\n    }\n  });\n}\nexport { svg_to_png };","map":{"version":3,"names":["cache_image","is_safari","svg_to_png","svg","width","height","scale","Promise","resolve","reject","source","encodeURIComponent","action","img","Image","crossOrigin","src","onload","canvas","document","createElement","ctx","getContext","dpr","window","devicePixelRatio","drawImage","toBlob","blob","url","URL","createObjectURL","e"],"sources":["/Users/mariaeduardatc/Documents/GitHub/website/node_modules/css-doodle/src/generator/svg-to-png.js"],"sourcesContent":["import { cache_image, is_safari } from '../utils/index.js';\n\nfunction svg_to_png(svg, width, height, scale) {\n  return new Promise((resolve, reject) => {\n    let source = `data:image/svg+xml;utf8,${ encodeURIComponent(svg) }`;\n    function action() {\n      let img = new Image();\n      img.crossOrigin = 'anonymous';\n      img.src = source;\n\n      img.onload = () => {\n        let canvas = document.createElement('canvas');\n        let ctx = canvas.getContext('2d');\n\n        let dpr = window.devicePixelRatio || 1;\n        /* scale with devicePixelRatio only when the scale equals 1 */\n        if (scale != 1) {\n          dpr = 1;\n        }\n\n        canvas.width = width * dpr;\n        canvas.height = height * dpr;\n        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n        try {\n          canvas.toBlob(blob => {\n            resolve({\n              blob,\n              source,\n              url: URL.createObjectURL(blob)\n            });\n          });\n        } catch (e) {\n          reject(e);\n        }\n      }\n    }\n\n    if (is_safari()) {\n      cache_image(source, action, 200);\n    } else {\n      action();\n    }\n  });\n}\n\nexport {\n  svg_to_png,\n}\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,SAAS,QAAQ,mBAAmB;AAE1D,SAASC,UAAU,CAACC,GAAG,EAAEC,KAAK,EAAEC,MAAM,EAAEC,KAAK,EAAE;EAC7C,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,IAAIC,MAAM,GAAI,2BAA2BC,kBAAkB,CAACR,GAAG,CAAG,EAAC;IACnE,SAASS,MAAM,GAAG;MAChB,IAAIC,GAAG,GAAG,IAAIC,KAAK,EAAE;MACrBD,GAAG,CAACE,WAAW,GAAG,WAAW;MAC7BF,GAAG,CAACG,GAAG,GAAGN,MAAM;MAEhBG,GAAG,CAACI,MAAM,GAAG,MAAM;QACjB,IAAIC,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;QAC7C,IAAIC,GAAG,GAAGH,MAAM,CAACI,UAAU,CAAC,IAAI,CAAC;QAEjC,IAAIC,GAAG,GAAGC,MAAM,CAACC,gBAAgB,IAAI,CAAC;QACtC;QACA,IAAInB,KAAK,IAAI,CAAC,EAAE;UACdiB,GAAG,GAAG,CAAC;QACT;QAEAL,MAAM,CAACd,KAAK,GAAGA,KAAK,GAAGmB,GAAG;QAC1BL,MAAM,CAACb,MAAM,GAAGA,MAAM,GAAGkB,GAAG;QAC5BF,GAAG,CAACK,SAAS,CAACb,GAAG,EAAE,CAAC,EAAE,CAAC,EAAEK,MAAM,CAACd,KAAK,EAAEc,MAAM,CAACb,MAAM,CAAC;QAErD,IAAI;UACFa,MAAM,CAACS,MAAM,CAACC,IAAI,IAAI;YACpBpB,OAAO,CAAC;cACNoB,IAAI;cACJlB,MAAM;cACNmB,GAAG,EAAEC,GAAG,CAACC,eAAe,CAACH,IAAI;YAC/B,CAAC,CAAC;UACJ,CAAC,CAAC;QACJ,CAAC,CAAC,OAAOI,CAAC,EAAE;UACVvB,MAAM,CAACuB,CAAC,CAAC;QACX;MACF,CAAC;IACH;IAEA,IAAI/B,SAAS,EAAE,EAAE;MACfD,WAAW,CAACU,MAAM,EAAEE,MAAM,EAAE,GAAG,CAAC;IAClC,CAAC,MAAM;MACLA,MAAM,EAAE;IACV;EACF,CAAC,CAAC;AACJ;AAEA,SACEV,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}